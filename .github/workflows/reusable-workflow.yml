name: Reusable Workflow

on:
  workflow_call:
    inputs:
      stage:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      AWS_REGION:
        required: false
      AWS_ORG_MASTER_ACCOUNT_ID:
        required: false
      AWS_ORG_ACCESS_ROLE:
        required: false
      AWS_DEPLOY_ROLE_NAME:
        required: false
      PROD_AWS_BUCKET_NAME:
        required: false
      DEV_AWS_BUCKET_NAME:
        required: false
      PROD_AWS_BUCKET_KEY_NAME:
        required: false
      DEV_AWS_BUCKET_KEY_NAME:
        required: false
      ALL_ACC_AWS_BUCKET_KEY_NAME:
        required: false
      ALL_ACC_AWS_BUCKET_NAME:
        required: false

jobs:
  deploy:
    name: Deploy with Terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Determine Deployment Mode
        run: |
          if [ "${{ inputs.stage }}" == "all-accounts" ]; then
            echo "DEPLOY_MODE=all-accounts" >> $GITHUB_ENV
          else
            echo "DEPLOY_MODE=${{ inputs.stage }}" >> $GITHUB_ENV
          fi

      - name: Determine S3 Bucket and Key (Dev/Prod)
        #if: env.DEPLOY_MODE != 'all-accounts'
        run: |
          if [ "${{ inputs.stage }}" == "all-accounts" ]; then
            echo "DEPLOY_MODE=all-accounts" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ secrets.ALL_ACC_AWS_BUCKET_NAME }}" >> $GITHUB_ENV
            echo "S3_BUCKET_KEY=${{ secrets.ALL_ACC_AWS_BUCKET_KEY_NAME }}" >> $GITHUB_ENV
          elif [ "${{ inputs.stage }}" == "prod" ]; then
            echo "DEPLOY_MODE=prod" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ secrets.PROD_AWS_BUCKET_NAME }}" >> $GITHUB_ENV
            echo "S3_BUCKET_KEY=${{ secrets.PROD_AWS_BUCKET_KEY_NAME }}" >> $GITHUB_ENV
          else
            echo "DEPLOY_MODE=dev" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ secrets.DEV_AWS_BUCKET_NAME }}" >> $GITHUB_ENV
            echo "S3_BUCKET_KEY=${{ secrets.DEV_AWS_BUCKET_KEY_NAME }}" >> $GITHUB_ENV
          fi

      - name: Initialize Terraform
        run: |
          if [ "$DEPLOY_MODE" == "all-accounts" ]; then
            terraform init -backend-config="bucket=$S3_BUCKET" -backend-config="key=$S3_BUCKET_KEY"
          else
            exit 1
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # Deploy to Dev or Prod
      - name: Terraform Apply (Dev/Prod)
        if: env.DEPLOY_MODE != 'all-accounts'
        run: |
          terraform apply -auto-approve -var="stage=${{ inputs.stage }}" -var="s3_bucket=$S3_BUCKET" -var="s3_bucket_key=$S3_BUCKET_KEY"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # Deploy to ALL AWS Accounts
      - name: Get AWS Account IDs
        if: env.DEPLOY_MODE == 'all-accounts'
        run: |
          ACCOUNT_IDS=$(aws organizations list-accounts --query "Accounts[*].Id" --output json | jq -r '.[]' | tr '\n' ',')
    
          # Remove the last comma if present
          ACCOUNT_IDS=${ACCOUNT_IDS%,}
    
          echo "ACCOUNT_IDS=$ACCOUNT_IDS" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          
      # Deploy to ALL AWS Accounts
      - name: Assume Role and Deploy to Each Account
        if: env.DEPLOY_MODE == 'all-accounts'
        run: |
          IFS=',' read -ra ACCOUNTS <<< "${{ env.ACCOUNT_IDS }}"
          for ACCOUNT_ID in "${ACCOUNTS[@]}"; do
            echo "Deploying to Account: $ACCOUNT_ID"

          # Skip the management account (992092700795) since the OrganizationAccountAccessRole won't exist there
          if [ "$ACCOUNT_ID" == "992092700795" ]; then
            echo "Skipping management account $ACCOUNT_ID"
            continue
          fi

          # Assume the role in the target member account
          TEMP_ROLE=$(aws sts assume-role --role-arn "arn:aws:iam::$ACCOUNT_ID:role/${{ secrets.AWS_DEPLOY_ROLE_NAME }}" --role-session-name GitHubDeployment)

          # Extract the temporary credentials from the assumed role
          export AWS_ACCESS_KEY_ID=$(echo $TEMP_ROLE | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $TEMP_ROLE | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $TEMP_ROLE | jq -r '.Credentials.SessionToken')

          # Ensure the credentials are set correctly
          if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ] || [ -z "$AWS_SESSION_TOKEN" ]; then
              echo "Failed to assume role for account $ACCOUNT_ID. Skipping deployment."
              continue
          fi

          # Run terraform apply for the account
          terraform apply -auto-approve -var="aws_account_id=$ACCOUNT_ID"
          done
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
