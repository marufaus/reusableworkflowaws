name: Reusable Workflow

on:
  workflow_call:
    inputs:
      stage:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      AWS_REGION:
        required: false
      AWS_ORG_MASTER_ACCOUNT_ID:
        required: false
      AWS_DEPLOY_ROLE_NAME:
        required: false
      PROD_AWS_BUCKET_NAME:
        required: false
      DEV_AWS_BUCKET_NAME:
        required: false
      PROD_AWS_BUCKET_KEY_NAME:
        required: false
      DEV_AWS_BUCKET_KEY_NAME:
        required: false
      ALL_ACC_AWS_BUCKET_KEY_NAME:
        required: false
      ALL_ACC_AWS_BUCKET_NAME:
        required: false

jobs:
  deploy:
    name: Deploy with Terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: List project files
        run: ls -l ${{ github.workspace }}

      - name: Determine Deployment Mode
        run: |
          if [ "${{ inputs.stage }}" == "all-accounts" ]; then
            echo "DEPLOY_MODE=all-accounts" >> $GITHUB_ENV
          else
            echo "DEPLOY_MODE=${{ inputs.stage }}" >> $GITHUB_ENV
          fi

      - name: Determine S3 Bucket and Key (Dev/Prod)
        run: |
          if [ "${{ inputs.stage }}" == "all-accounts" ]; then
            echo "DEPLOY_MODE=all-accounts" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ secrets.ALL_ACC_AWS_BUCKET_NAME }}" >> $GITHUB_ENV
            echo "S3_BUCKET_KEY=${{ secrets.ALL_ACC_AWS_BUCKET_KEY_NAME }}" >> $GITHUB_ENV
          elif [ "${{ inputs.stage }}" == "prod" ]; then
            echo "DEPLOY_MODE=prod" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ secrets.PROD_AWS_BUCKET_NAME }}" >> $GITHUB_ENV
            echo "S3_BUCKET_KEY=${{ secrets.PROD_AWS_BUCKET_KEY_NAME }}" >> $GITHUB_ENV
          else
            echo "DEPLOY_MODE=dev" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ secrets.DEV_AWS_BUCKET_NAME }}" >> $GITHUB_ENV
            echo "S3_BUCKET_KEY=${{ secrets.DEV_AWS_BUCKET_KEY_NAME }}" >> $GITHUB_ENV
          fi

      - name: Initialize Terraform
        run: |
          if [ "$DEPLOY_MODE" == "all-accounts" ]; then
            terraform init -backend-config="bucket=$S3_BUCKET" -backend-config="key=$S3_BUCKET_KEY"
          else
            exit 1
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # Deploy to Dev or Prod
      - name: Terraform Apply (Dev/Prod)
        if: env.DEPLOY_MODE != 'all-accounts'
        run: |
          terraform apply -auto-approve -var="stage=${{ inputs.stage }}" -var="s3_bucket=$S3_BUCKET" -var="s3_bucket_key=$S3_BUCKET_KEY"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # Deploy to ALL AWS Accounts
      - name: Assume Role and Deploy to Each Account
        if: env.DEPLOY_MODE == 'all-accounts'
        run: |
          # Step 1: Assume role in the management account
          echo "Verifying access to the management account..."
          aws sts get-caller-identity

          # Step 2: List all accounts in the organization
          ACCOUNT_IDS=$(aws organizations list-accounts --query "Accounts[*].Id" --output json | jq -r '.[]')

          # Step 3: Assume AWSOrganizationRole to access other accounts
          for ACCOUNT_ID in $ACCOUNT_IDS; do
            MANAGEMENT_ACCOUNT_ID="992092700795"

          # Skip the management account and the specific account
            if [ "$ACCOUNT_ID" == "$MANAGEMENT_ACCOUNT_ID" ]; then
            echo "Skipping account: $ACCOUNT_ID"
            continue
            fi

            echo "Deploying IAM Role in Account: $ACCOUNT_ID"

            eval $(aws sts assume-role --role-arn arn:aws:iam::${ACCOUNT_ID}:role/OrganizationAccountAccessRole --role-session-name AssumeOrgRole | jq -r '.Credentials | "export AWS_ACCESS_KEY_ID=\(.AccessKeyId)\nexport AWS_SECRET_ACCESS_KEY=\(.SecretAccessKey)\nexport AWS_SESSION_TOKEN=\(.SessionToken)\n"')

            # Step 4: Run Terraform plan and apply
            cd ${{ github.workspace }}
            ls -l ${{ github.workspace }}

            # Run terraform plan for the account
            terraform plan -var-file="${{ github.workspace }}/all-account.tfvars"

            # Ensure that AWS credentials are still set before running terraform apply
            echo "Running terraform apply for account $ACCOUNT_ID"

            # Run terraform apply for the account
            #terraform apply -var-file="${{ github.workspace }}/all-account.tfvars" -auto-approve

             unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
          done
        continue-on-error: true
